// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCreateUser } from "./types/belshare/eav/tx";
import { MsgCreateNewUser } from "./types/belshare/eav/tx";
import { MsgCraeteValue } from "./types/belshare/eav/tx";
import { MsgCreateShop } from "./types/belshare/eav/tx";
import { MsgCraeteAtteibute } from "./types/belshare/eav/tx";
import { MsgCreateEntityType } from "./types/belshare/eav/tx";
import { MsgNewMerchant } from "./types/belshare/eav/tx";


export { MsgCreateUser, MsgCreateNewUser, MsgCraeteValue, MsgCreateShop, MsgCraeteAtteibute, MsgCreateEntityType, MsgNewMerchant };

type sendMsgCreateUserParams = {
  value: MsgCreateUser,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateNewUserParams = {
  value: MsgCreateNewUser,
  fee?: StdFee,
  memo?: string
};

type sendMsgCraeteValueParams = {
  value: MsgCraeteValue,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateShopParams = {
  value: MsgCreateShop,
  fee?: StdFee,
  memo?: string
};

type sendMsgCraeteAtteibuteParams = {
  value: MsgCraeteAtteibute,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateEntityTypeParams = {
  value: MsgCreateEntityType,
  fee?: StdFee,
  memo?: string
};

type sendMsgNewMerchantParams = {
  value: MsgNewMerchant,
  fee?: StdFee,
  memo?: string
};


type msgCreateUserParams = {
  value: MsgCreateUser,
};

type msgCreateNewUserParams = {
  value: MsgCreateNewUser,
};

type msgCraeteValueParams = {
  value: MsgCraeteValue,
};

type msgCreateShopParams = {
  value: MsgCreateShop,
};

type msgCraeteAtteibuteParams = {
  value: MsgCraeteAtteibute,
};

type msgCreateEntityTypeParams = {
  value: MsgCreateEntityType,
};

type msgNewMerchantParams = {
  value: MsgNewMerchant,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCreateUser({ value, fee, memo }: sendMsgCreateUserParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateUser: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateUser({ value: MsgCreateUser.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateUser: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateNewUser({ value, fee, memo }: sendMsgCreateNewUserParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateNewUser: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateNewUser({ value: MsgCreateNewUser.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateNewUser: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCraeteValue({ value, fee, memo }: sendMsgCraeteValueParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCraeteValue: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCraeteValue({ value: MsgCraeteValue.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCraeteValue: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateShop({ value, fee, memo }: sendMsgCreateShopParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateShop: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateShop({ value: MsgCreateShop.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateShop: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCraeteAtteibute({ value, fee, memo }: sendMsgCraeteAtteibuteParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCraeteAtteibute: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCraeteAtteibute({ value: MsgCraeteAtteibute.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCraeteAtteibute: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateEntityType({ value, fee, memo }: sendMsgCreateEntityTypeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateEntityType: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateEntityType({ value: MsgCreateEntityType.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateEntityType: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgNewMerchant({ value, fee, memo }: sendMsgNewMerchantParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgNewMerchant: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgNewMerchant({ value: MsgNewMerchant.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgNewMerchant: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCreateUser({ value }: msgCreateUserParams): EncodeObject {
			try {
				return { typeUrl: "/belshare.eav.MsgCreateUser", value: MsgCreateUser.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateUser: Could not create message: ' + e.message)
			}
		},
		
		msgCreateNewUser({ value }: msgCreateNewUserParams): EncodeObject {
			try {
				return { typeUrl: "/belshare.eav.MsgCreateNewUser", value: MsgCreateNewUser.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateNewUser: Could not create message: ' + e.message)
			}
		},
		
		msgCraeteValue({ value }: msgCraeteValueParams): EncodeObject {
			try {
				return { typeUrl: "/belshare.eav.MsgCraeteValue", value: MsgCraeteValue.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCraeteValue: Could not create message: ' + e.message)
			}
		},
		
		msgCreateShop({ value }: msgCreateShopParams): EncodeObject {
			try {
				return { typeUrl: "/belshare.eav.MsgCreateShop", value: MsgCreateShop.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateShop: Could not create message: ' + e.message)
			}
		},
		
		msgCraeteAtteibute({ value }: msgCraeteAtteibuteParams): EncodeObject {
			try {
				return { typeUrl: "/belshare.eav.MsgCraeteAtteibute", value: MsgCraeteAtteibute.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCraeteAtteibute: Could not create message: ' + e.message)
			}
		},
		
		msgCreateEntityType({ value }: msgCreateEntityTypeParams): EncodeObject {
			try {
				return { typeUrl: "/belshare.eav.MsgCreateEntityType", value: MsgCreateEntityType.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateEntityType: Could not create message: ' + e.message)
			}
		},
		
		msgNewMerchant({ value }: msgNewMerchantParams): EncodeObject {
			try {
				return { typeUrl: "/belshare.eav.MsgNewMerchant", value: MsgNewMerchant.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgNewMerchant: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			BelshareEav: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;